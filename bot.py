# bot.py

import telebot
from telebot.types import Message
from elastic_manager import ElasticManager  # ElasticManager is used for search and list operations
import os
import logging

def save_results_to_file(results, filename):
    """
    EÅŸleÅŸen sonuÃ§larÄ± bir .txt dosyasÄ±na kaydeder.
    """
    with open(filename, 'w', encoding='utf-8') as file:
        for result in results:
            file.write(f"SatÄ±r: {result['line_number']}, Ä°Ã§erik: {result['content']}\n")
    return filename

# Logging AyarlarÄ±
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Telegram Bot Token (Ã‡evresel DeÄŸiÅŸkenlerden AlÄ±nmasÄ± GÃ¼venlik Ä°Ã§in Ã–nerilir)
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "7368855657:AAHwY8hmzNOyxd_TsDTb1Gy8WT4Qw-b77VA")  # GÃ¼venlik nedeniyle tokenÄ±nÄ±zÄ± gizli tutun
bot = telebot.TeleBot(BOT_TOKEN)

# Elasticsearch Manager
ES_HOST = os.getenv("ELASTIC_HOST", "http://localhost:9200")
ES_USERNAME = os.getenv("ELASTIC_USERNAME", None)
ES_PASSWORD = os.getenv("ELASTIC_PASSWORD", None)
INDEX_NAME = "*"  # TÃ¼m indekslerde arama yapmak iÃ§in '*' kullanÄ±n

try:
    es_manager = ElasticManager(host=ES_HOST, username=ES_USERNAME, password=ES_PASSWORD)
except Exception as e:
    logger.critical(f"Elasticsearch baÄŸlantÄ±sÄ± baÅŸarÄ±sÄ±z: {e}")
    exit(1)

# Authorized Users
authorized_users = set()

# Authorization Check
def is_authorized(user_id):
    return user_id in authorized_users

# /start Command
@bot.message_handler(commands=["start"])
def start_command(message: Message):
    bot.reply_to(message, "Leak Manager Bot'a hoÅŸ geldiniz! EriÅŸim saÄŸlamak iÃ§in /authorize komutunu kullanÄ±n.")

# /authorize Command
@bot.message_handler(commands=["authorize"])
def authorize_user(message: Message):
    if message.chat.id not in authorized_users:
        authorized_users.add(message.chat.id)
        bot.reply_to(message, "Botu kullanmak iÃ§in yetkilendirildiniz.")
        logger.info(f"KullanÄ±cÄ± yetkilendirildi: {message.chat.id}")
    else:
        bot.reply_to(message, "Zaten yetkilisiniz.")

# /listleaks Command
@bot.message_handler(commands=["listleaks"])
def list_leaks(message: Message):
    if not is_authorized(message.chat.id):
        bot.reply_to(message, "Yetkisiz eriÅŸim.")
        logger.warning(f"Yetkisiz eriÅŸim denemesi: {message.chat.id}")
        return

    indices = es_manager.list_indices()
    if indices:
        bot.reply_to(message, "Mevcut indeksler:\n" + "\n".join(indices))
    else:
        bot.reply_to(message, "HiÃ§ indeks bulunamadÄ±.")

# /search Command
@bot.message_handler(commands=["search"])
def search_leaks(message: Message):
    if not is_authorized(message.chat.id):
        bot.reply_to(message, "Yetkisiz eriÅŸim.")
        logger.warning(f"Yetkisiz eriÅŸim denemesi: {message.chat.id}")
        return

    msg = bot.reply_to(message, "Aramak istediÄŸiniz anahtar kelimeyi yazÄ±n:")

    # Register the next step handler
    bot.register_next_step_handler(msg, handle_query)

import re

def escape_markdown(text):
    """
    Telegram Markdown formatÄ±na uygun olmayan karakterlerden kaÃ§mak iÃ§in kullanÄ±lÄ±r.
    """
    escape_chars = r"_*[]()~`>#+-=|{}.!"
    return re.sub(f"([{re.escape(escape_chars)}])", r"\\\1", text)

def handle_query(message: Message):
    if not is_authorized(message.chat.id):
        bot.reply_to(message, "Yetkisiz eriÅŸim.")
        logger.warning(f"Yetkisiz eriÅŸim denemesi: {message.chat.id}")
        return

    query = message.text.strip()
    if not query:
        bot.reply_to(message, "LÃ¼tfen geÃ§erli bir arama sorgusu girin.")
        return

    try:
        # Scroll API ile Elasticsearch'te arama yap
        results = []
        scroll_id = None

        # Ä°lk sorguyu baÅŸlat
        response = es_manager.client.search(
            index=INDEX_NAME,
            query={
                "query_string": {
                    "query": f"*{query}*",
                    "fields": ["content"]
                }
            },
            size=1000,  # Her sorguda 1000 sonuÃ§ dÃ¶ndÃ¼r
            scroll="2m"  # Scroll sÃ¼resi
        )
        results.extend(response['hits']['hits'])
        scroll_id = response['_scroll_id']

        # Scroll dÃ¶ngÃ¼sÃ¼
        while True:
            response = es_manager.client.scroll(scroll_id=scroll_id, scroll="2m")
            if not response['hits']['hits']:
                break
            results.extend(response['hits']['hits'])
            scroll_id = response['_scroll_id']

        if results:
            # TÃ¼m sonuÃ§larÄ± bir dosyaya kaydet
            responses = []
            for hit in results:
                source = hit['_source']
                responses.append({
                    "line_number": source.get('line_number', 'Bilinmiyor'),
                    "content": source.get('content', '')
                })

            filename = f"search_results_{message.chat.id}.txt"
            save_results_to_file(responses, filename)
            with open(filename, 'rb') as file:
                bot.send_document(message.chat.id, file)
        else:
            response = "HiÃ§bir eÅŸleÅŸme bulunamadÄ±."
            bot.reply_to(message, response)

    except Exception as e:
        logger.error(f"Arama sÄ±rasÄ±nda hata oluÅŸtu: {e}")
        response = "Arama sÄ±rasÄ±nda bir hata oluÅŸtu. LÃ¼tfen tekrar deneyin."
        bot.reply_to(message, response)


# /help Command
@bot.message_handler(commands=["help"])
def help_command(message: Message):
    help_text = (
        "ğŸ“š **Leak Manager Bot KomutlarÄ±** ğŸ“š\n\n"
        "/start - Botu baÅŸlatÄ±r ve hoÅŸ geldiniz mesajÄ± gÃ¶sterir.\n"
        "/authorize - Botu kullanmak iÃ§in yetkilendirilir.\n"
        "/listleaks - Mevcut indekslerin listesini gÃ¶sterir. (Yetkilendirme gerektirir)\n"
        "/search - Ä°Ã§erik aramak iÃ§in anahtar kelime girmenizi saÄŸlar. (Yetkilendirme gerektirir)\n"
        "/help - TÃ¼m komutlarÄ± listeler."
    )
    bot.reply_to(message, help_text, parse_mode="Markdown")

# Bot Start
try:
    logger.info("Bot Ã§alÄ±ÅŸÄ±yor...")
    bot.infinity_polling(timeout=10, long_polling_timeout=5)
except Exception as e:
    logger.critical(f"Bir hata oluÅŸtu: {e}")
